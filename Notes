Exercise: Look at this requirement in Wave 1: "For a given driver, calculate their total revenue for all trips. Each driver gets 80% of the trip cost after a fee of $1.65 is subtracted." Spend some time writing pseudocode for this.

def total_revenue
  loop through each trip
  subtract 1.65 fee
  calculate 80%
  add to running total
end



# Pseudocode: Total Revenue for Driver
#
# Input: none
# Output: Total revenue (float)
# Where does it live? Driver#total_revenue

def total_revenue
  fee = 1.65
  driver_takehome = 0.8

  subtotal = 0
  trips.each do |trip|
    # Question: what if the cost is less than the fee
    subtotal += trip.cost - fee
  end

  total = subtotal * driver_takehome
  return total
end

# Test 1: three trips
trips = [
  RideShare::Trip.new({cost: 5, rating: 3}),
  RideShare::Trip.new({cost: 7, rating: 3}),
  RideShare::Trip.new({cost: 8, rating: 3}),
]

driver_data = {
  id: 7,
  vin: 'a' * 17,
  name: 'test driver'
  trips: trips
}

driver = Driver.new(driver_data)

driver.total_revenue.must_equal 8
